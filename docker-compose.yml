networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  postgres:
    driver: local
  redis:
    driver: local
  mysql:
    driver: local
  mariadb:
    driver: local
  netdata:
    driver: local
  portainer:
    driver: local
  appsmith-stacks:
    driver: local

services:
  ### eimzo #########################################

  eimzo:
    restart: unless-stopped
    container_name: eimzo
    build:
      context: ./
      dockerfile: ./eimzo/Dockerfile
      args:
        - ROOT_PASSWORD=${ROOT_PASSWORD}
    volumes:
      - ./eimzo/configs:/var/app
    ports:
      - "220:22"
      - "780:80"
      - "29090:9090"
    extra_hosts:
      - "e-imzo.uz:127.0.0.5"
    environment:
      - TSA_URL=http://e-imzo.uz/cams/tst
      - TRUSTSTORE_FILE=/var/app/server/keys/truststore.jks
      - TRUSTSTORE_PASSWORD=12345678
      - JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF-8
      - ROOT_PASSWORD=${ROOT_PASSWORD}
      - TZ=Asia/Tashkent
    networks:
      - frontend
      - backend
    stdin_open: true
    tty: true

  ### Mariadb Alpine
  ##############################################

  mariadb:
    restart: unless-stopped
    container_name: mariadb
    build:
      context: ./
      dockerfile: ./mariadb/Dockerfile
      args:
        - ROOT_PASSWORD=${ROOT_PASSWORD}
    volumes:
      - mariadb:/var/lib/mysql
      - ${DIR_LOG}/mariadb:/var/log/mysql
    ports:
      - "222:22"
      - "23306:3306"
    environment:
      - ROOT_PASSWORD=${ROOT_PASSWORD}
      - MYSQL_PWD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
      - TZ=Asia/Tashkent
    networks:
      - backend
    stdin_open: true
    tty: true

  ###   Mariadb Alpine    ###   3
  ##############################################

  mysql:
    restart: unless-stopped
    container_name: mysql
    build:
      context: ./
      dockerfile: ./mysql/Dockerfile
      args:
        - ROOT_PASSWORD=${ROOT_PASSWORD}
    volumes:
      - mysql:/var/lib/mysql
      - ${DIR_LOG}/mysql:/var/log/mysql
    ports:
      - "223:22"
      - "33306:3306"
    environment:
      - ROOT_PASSWORD=${ROOT_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
      - TZ=Asia/Tashkent
    networks:
      - backend
    stdin_open: true
    tty: true

  ### NetData ################################################

  netdata:
    restart: unless-stopped
    container_name: netdata
    build:
      context: ./
      dockerfile: ./netdata/Dockerfile
      args:
        - ROOT_PASSWORD=${ROOT_PASSWORD}
    cap_add:
      - SYS_PTRACE
    volumes:
      - netdata:/host
    ports:
      - "39999:19999"
    environment:
      - ROOT_PASSWORD=${ROOT_PASSWORD}
      - TZ=Asia/Tashkent
    networks:
      - backend
    stdin_open: true
    tty: true

  ### NGINX Server #########################################

  nginx:
    restart: unless-stopped
    container_name: nginx
    build:
      context: ./
      dockerfile: ./nginx/Dockerfile
      args:
        - ROOT_PASSWORD=${ROOT_PASSWORD}
    volumes:
      - ${DIR_APP}:/var/www:${MOUNT}
      - ${DIR_SSL}:/var/ssl:${MOUNT}
      - ${DIR_LOG}/nginx:/var/log/nginx
      - ./nginx/configs:/etc/nginx/configs
      - ./nginx/configs/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - php
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    ports:
      - "224:22"
      - "${PORT_HTTP}:80"
      - "${PORT_HTTPS}:443"
    environment:
      - ROOT_PASSWORD=${ROOT_PASSWORD}
      - TZ=Asia/Tashkent
    networks:
      - frontend
      - backend
    stdin_open: true
    tty: true


  nginx-app:
    restart: unless-stopped
    container_name: nginx
    build:
      context: ./
      dockerfile: ./nginx-app/Dockerfile
      args:
        - ROOT_PASSWORD=${ROOT_PASSWORD}
    volumes:
      - ${DIR_LOG}/nginx:/var/log/nginx
      - ./nginx-app/configs:/etc/nginx/configs
      - ./node-proliga/static:/app/static
      - ./nginx-app/configs/nginx.conf:/etc/nginx/nginx.conf
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    ports:
      - "236:22"
      - "${PORT_HTTP}:80"
      - "${PORT_HTTPS}:443"
    environment:
      - ROOT_PASSWORD=${ROOT_PASSWORD}
      - TZ=Asia/Tashkent
    networks:
      - frontend
      - backend
    stdin_open: true
    tty: true


    

  node-proliga:
    restart: unless-stopped
    container_name: node-proliga
    build:
      context: ./
      dockerfile: ./node-proliga/Dockerfile
      args:
        - ROOT_PASSWORD=${ROOT_PASSWORD}
    volumes:
      - ./node-proliga/static:/app/static
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    ports:
      - "237:22"
      - "3030:3000"
    environment:
      - ROOT_PASSWORD=${ROOT_PASSWORD}
      - TZ=Asia/Tashkent
    networks:
      - frontend
      - backend
    stdin_open: true
    tty: true


  node-pay-proliga:
    restart: unless-stopped
    container_name: node-pay-proliga
    build:
      context: ./
      dockerfile: ./node-pay-proliga/Dockerfile
      args:
        - ROOT_PASSWORD=${ROOT_PASSWORD}
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    ports:
      - "238:22"
      - "3040:3000"
    environment:
      - ROOT_PASSWORD=${ROOT_PASSWORD}
      - TZ=Asia/Tashkent
    networks:
      - frontend
      - backend
    stdin_open: true
    tty: true


  node-lesaapp:
    restart: unless-stopped
    build:
      context: ./
      dockerfile: ./node-lesaapp/Dockerfile
      args:
        - ROOT_PASSWORD=${ROOT_PASSWORD}
    volumes:
      - ./node-lesaapp/source:/source
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    ports:
      - "237:22"
      - "3030:3000"
    environment:
      - ROOT_PASSWORD=${ROOT_PASSWORD}
      - TZ=Asia/Tashkent
    networks:
      - frontend
      - backend
    stdin_open: true
    tty: true


  ### php ##############################################

  php:
    restart: unless-stopped
    container_name: php
    build:
      context: ./
      dockerfile: ./php/Dockerfile
      args:
        - ROOT_PASSWORD=${ROOT_PASSWORD}
    volumes:
      - ${DIR_APP}:/var/www:${MOUNT}
      - ${DIR_LOG}/php:/var/log/php
      - ${DIR_SSL}:/var/ssl:${MOUNT}
      - ./php/configs/php.ini:/usr/local/etc/php/php.ini
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    environment:
      - ROOT_PASSWORD=${ROOT_PASSWORD}
      - PHP_IDE_CONFIG=serverName=asrorz
      - FAKETIME=-0
      - TZ=Asia/Tashkent
    networks:
      - backend
    depends_on:
      - mariadb
      - postgres
    ports:
      - "225:22"
      - "29000:9000"
      - "6001:6001"
    stdin_open: true
    tty: true

  ### Portainer ################################################

  portainer:
    restart: unless-stopped
    container_name: portainer
    build:
      context: ./
      dockerfile: ./portainer/Dockerfile
      args:
        - ROOT_PASSWORD=${ROOT_PASSWORD}
    volumes:
      - portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    ports:
      - "39000:9000"
    environment:
      - ROOT_PASSWORD=${ROOT_PASSWORD}
      - TZ=Asia/Tashkent
    networks:
      - backend
    stdin_open: true
    tty: true

  ### PostgreSQL ###########################################

  postgres:
    restart: unless-stopped
    container_name: postgres
    build:
      context: ./
      dockerfile: ./postgres/Dockerfile
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${PG_PORT}:5432" # expose Postgres directly
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${PG_DB_NAME}
      - PGDATA=/var/lib/postgresql/data/pgdata
      - TZ=Asia/Tashkent
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    # âœ… Command must not include YAML comments inline
    command: >
      postgres
      -c max_connections=${PG_MAX_CONNECTIONS:-100}
      -c password_encryption=md5
      -c shared_preload_libraries=pg_stat_statements,pg_cron,pgaudit,http,pgcrypto,uuid-ossp
    networks:
      - backend
    stdin_open: true
    tty: true

  # PgBouncer for client applications (transaction pooling)
  pgbouncer_tx:
    container_name: pgbouncer_tx
    build:
      context: ./
      dockerfile: ./pgbouncer/Dockerfile
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "${PGB_TX_PORT:-6432}:5432" # expose PgBouncer TX pool on host
    environment:
      DB_USER: ${PG_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: postgres
      DB_PORT: 5432
      AUTH_TYPE: md5
      ADMIN_USERS: ${PG_USER}
      POOL_MODE: transaction
      MAX_CLIENT_CONN: ${PGB_MAX_CLIENT_CONN:-200}
      DEFAULT_POOL_SIZE: ${PGB_DEFAULT_POOL_SIZE:-20}
      LISTEN_ADDR: 0.0.0.0
      LISTEN_PORT: 5432
    networks:
      - backend
    stdin_open: true
    tty: true

  # PgBouncer for PostgREST (session pooling)
  pgbouncer_sess:
    container_name: pgbouncer_sess
    build:
      context: ./
      dockerfile: ./pgbouncer/Dockerfile
    restart: unless-stopped
    depends_on:
      - postgres
    ports:
      - "${PGB_SESS_PORT:-7432}:5432" # expose PgBouncer SESS pool on host
    environment:
      DB_USER: ${PG_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: postgres
      DB_PORT: 5432
      AUTH_TYPE: md5
      ADMIN_USERS: ${PG_USER}
      POOL_MODE: session
      MAX_CLIENT_CONN: ${PGB_MAX_CLIENT_CONN:-200}
      DEFAULT_POOL_SIZE: ${PGB_DEFAULT_POOL_SIZE:-20}
      LISTEN_ADDR: 0.0.0.0
      LISTEN_PORT: 5432
    networks:
      - backend
    stdin_open: true
    tty: true

  # PostgREST
  pgrest:
    container_name: pgrest
    build:
      context: ./
      dockerfile: ./pgrest/Dockerfile
    restart: unless-stopped
    depends_on:
      - pgbouncer_sess
    ports:
      - "${PGRST_PORT:-8000}:3000"
    environment:
      - ROOT_PASSWORD=${ROOT_PASSWORD}
      - PGRST_DB_URI=postgres://${PG_USER}:${DB_PASSWORD}@pgbouncer_sess:5432/${PG_DB_NAME}
      - PGRST_DB_ANON_ROLE=web_anon
      - PGRST_JWT_SECRET=${PGRST_JWT_SECRET}
      - TZ=Asia/Tashkent
    networks:
      - backend
    stdin_open: true
    tty: true

  ### Redis ################################################
  redis:
    restart: unless-stopped
    container_name: redis
    build:
      context: ./
      dockerfile: ./redis/Dockerfile
      args:
        - ROOT_PASSWORD=${ROOT_PASSWORD}
    volumes:
      - redis:/data
    ports:
      - "227:22"
      - "26379:6379"
    environment:
      - ROOT_PASSWORD=${ROOT_PASSWORD}
      - TZ=Asia/Tashkent
    networks:
      - backend
    stdin_open: true
    tty: true

  ### git #########################################

  git:
    restart: unless-stopped
    container_name: git
    build:
      context: ./
      dockerfile: ./git/Dockerfile
      args:
        - ROOT_PASSWORD=${ROOT_PASSWORD}
    volumes:
      - ${DIR_APP}:/var/www:${MOUNT}
    ports:
      - "228:22"
    environment:
      - ROOT_PASSWORD=${ROOT_PASSWORD}
      - TZ=Asia/Tashkent
    networks:
      - frontend
      - backend
    stdin_open: true
    tty: true

  ### appsmith #########################################
  appsmith:
    image: komoliddin/appsmith-ce:1.0
    container_name: appsmith
    ports:
      - "${APPSMITH_PORT}:80"
      - "${APPSMITH_PORT_HTTPS}:443"
    environment:
      APPSMITH_MAIL_ENABLED: "false"
    volumes:
      - appsmith-stacks:/appsmith-stacks
    restart: unless-stopped
    networks:
      - frontend
      - backend
    stdin_open: true
    tty: true
